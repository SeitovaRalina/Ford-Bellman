import math
i = math.inf
def way(s):
    bup = True
    index = 1
    res = [s + 1]
    while (bup):
        x_r = []
        # прообраз вершины x_s = множество x_r
        for i in range(n):
            if c[i][s] != math.inf:
                x_r.append(i)
        for r in x_r:
            if l[n - 1 - index][r] + c[r][s] == l[n - index][s]:
                res = [r + 1] + res
                s = r
                if r == start: bup = False
        index += 1
    return res
c = [[i, 1, i, i, 3],
     [i, i, 8, 7, 1],
     [i, i, i, 1, -5],
     [i, i, 2, i, i],
     [i, i, i, 4, i]]
# c = [[i, 7, 9, i, 11, i],
#       [i, i, 6, 6, i, 13],
#       [i, i, i, 5, 6, i],
#       [i, i, i, i, i, i],
#       [i,  4, i, 6, i, 8],
#       [i, i, i, 7, i, i]]
n = len(c)
lmd = [i]*n
start = int(input("Введите начальную вершину: ")) - 1
lmd[start] = 0
l = [lmd]
for k in range(n-1):
    lmd_1 = [i]*n
    for i in range(n):
        a = []
        lmd_1[start] = 0
        for j in range(n):
            a.append(lmd[j] + c[j][i])
        lmd_1[i] = min(min(a), lmd[i])
    # закомментировано, потому что для восстановления пути нужна кв. матрица n-ого порядка, а так можно без нее :)
    # if lmd == lmd_1:
    #     break
    lmd = lmd_1
    l.append(lmd)

for i in range(n):
    if lmd[i] == math.inf:
        print(f"'{start + 1}' -> '{i + 1}': пути нет")
    elif i == start:
        print(f"'{start + 1}' -> '{i + 1}': начальная вершина")
    else:
        print(f"'{start + 1}' -> '{i + 1}': {lmd[i]} - {way(i)}")
# - граф, который из файлика

#Введите начальную вершину: 1
# '1' -> '1': начальная вершина
# '1' -> '2': 1 - [1, 2]
# '1' -> '3': 8 - [1, 2, 5, 4, 3]
# '1' -> '4': 6 - [1, 2, 5, 4]
# '1' -> '5': 2 - [1, 2, 5]

# Введите начальную вершину: 2
# '2' -> '1': пути нет
# '2' -> '2': начальная вершина
# '2' -> '3': 7 - [2, 5, 4, 3]
# '2' -> '4': 5 - [2, 5, 4]
# '2' -> '5': 1 - [2, 5]

# Введите начальную вершину: 3
# '3' -> '1': пути нет
# '3' -> '2': пути нет
# '3' -> '3': начальная вершина
# '3' -> '4': -1 - [3, 5, 4]
# '3' -> '5': -5 - [3, 5]

# Введите начальную вершину: 4
# '4' -> '1': пути нет
# '4' -> '2': пути нет
# '4' -> '3': 2 - [4, 3]
# '4' -> '4': начальная вершина
# '4' -> '5': -3 - [4, 3, 5]

# Введите начальную вершину: 5
# '5' -> '1': пути нет
# '5' -> '2': пути нет
# '5' -> '3': 6 - [5, 4, 3]
# '5' -> '4': 4 - [5, 4]
# '5' -> '5': начальная вершина